Sadly, the available resources i researched did not give a distinct complete answer to the questions i had regarding GUI design under DirectX 11. Some suggested using a third party library such as CEGUI, GWEN or AntTweakBar (http://www.gamedev.net/topic/665823-directx-11-ui-library/). Others went on to implement everything themselves, including a separate rendering queue and possibly even an own thread for the UI (http://www.gamedev.net/page/resources/_/technical/directx-and-xna/developing-a-gui-using-c-and-directx-part-1-r994).

As it is not certain to this point, whether we are allowed to use third party libraries and the sources about custom implementations are neither complete, nor academically acceptable, i am going to display my own idea of concept for a possible GUI integration. This concept is built up on the ideas of popular game engines as Unity3D:

Each GameObject needs a flag which states if the object is a UI Element or not.
UI components are basically normal GameObjects which are rendered in screen coordinates (Both 2D and 3D UI Elements are possible this way).

The main menu will be a completely own scene (-graph) and all submenus within are just being hidden until relevant (The latter does work for the PauseMenu aswell).

Very good Tutorial on 2DRendering: http://www.rastertek.com/dx11tut11.html
See Lecture 8

Beginning DirectX 11 Game Programming, Chapter 3 & 4

Bibliography:

Harvard:

Sherrod, A. and Jones, W. (2011) Beginning DirectX 11 game programming. Boston, MA: Delmar Cengage Learning.
DirectX 10, DirectX 11, and DirectX 12 tutorials (2016) Available at: http://rastertek.com (Accessed: 21 October 2016).

ACM Siggraph:

Beginning DirectX 11 Game Programming. 2011. Course Technology, Boston.
RasterTek - DirectX 10, DirectX 11, and DirectX 12 Tutorials. 2016. Rastertek.com. http://rastertek.com.